diff -Nru p3scan-2.9.03d/src/Makefile.am p3scan-2.9.03d-clamdunix/src/Makefile.am
--- p3scan-2.9.03d/src/Makefile.am	2005-12-23 00:35:31.000000000 +0100
+++ p3scan-2.9.03d-clamdunix/src/Makefile.am	2006-02-17 12:39:55.651375664 +0100
@@ -1,7 +1,7 @@
 bin_PROGRAMS = p3scan
 p3scan_SOURCES = p3scan.c getlinep3.c parsefile.c scanner_avpd.c \
 	scanner_avpd_new.c scanner_clamd.c scanner_trophie.c \
-	scanner_bash.c scanner_basic.c getline_ssl.c
+	scanner_bash.c scanner_basic.c getline_ssl.c scanner_clamdunix.c
 
 # set the include path found by configure
 INCLUDES= $(all_includes)
diff -Nru p3scan-2.9.03d/src/scanner.h p3scan-2.9.03d-clamdunix/src/scanner.h
--- p3scan-2.9.03d/src/scanner.h	2006-01-06 06:08:37.000000000 +0100
+++ p3scan-2.9.03d-clamdunix/src/scanner.h	2006-02-17 12:17:08.402229128 +0100
@@ -34,6 +34,7 @@
 extern scanner_t scanner_avpd_new;
 extern scanner_t scanner_trophie;
 extern scanner_t scanner_clamd;
+extern scanner_t scanner_clamdunix;
 
 scanner_t *scannerlist[] = {
 #ifdef PCRE
@@ -44,6 +45,7 @@
    &scanner_avpd_new,
    &scanner_trophie,
    &scanner_clamd,
+   &scanner_clamdunix,
    NULL
 };
 
diff -Nru p3scan-2.9.03d/src/scanner_clamdunix.c p3scan-2.9.03d-clamdunix/src/scanner_clamdunix.c
--- p3scan-2.9.03d/src/scanner_clamdunix.c	1970-01-01 01:00:00.000000000 +0100
+++ p3scan-2.9.03d-clamdunix/src/scanner_clamdunix.c	2006-02-17 12:43:09.420918216 +0100
@@ -0,0 +1,210 @@
+/***************************************************************************
+ *   Copyright (C) 2003-2006 by Jack S. Lai                                *
+ *   laitcg at gmail dot com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#define _GNU_SOURCE
+
+#include <string.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <netdb.h>
+#include <unistd.h>
+#include <string.h>
+#include <strings.h>
+#include <arpa/inet.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <errno.h>
+#include <sysexits.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+#include "p3scan.h"
+#include "getlinep3.h"
+
+#define DEFAULT_SOCKET  "/var/run/clamd.sock"
+#undef DEBUG_MESSAGE
+#define log_message 	do_log
+struct configuration_t * config;
+
+extern char *substr(char *string, int start, size_t count);
+extern int checktimeout(struct proxycontext *p);
+
+static int dsresult(int sockd, char **virus) {
+	int infected = 0, waserror = 0;
+	char buff[4096], *v = NULL;
+	FILE *fd;
+
+
+	if ((fd = fdopen(dup(sockd), "r")) == NULL) {
+		log_message(LOG_ERR, "Can't open clam fd for reading.");
+		return -1;
+	}
+
+	while (fgets(buff, sizeof(buff), fd)) {
+		if (strstr(buff, "FOUND\n")) {
+			/* Parsear: "fd[7]: Pascal-529 FOUND" */
+			sscanf(buff, "[^:]: %as FOUND", &v);
+			*virus = v;
+			infected++;
+			break;
+		}
+
+		if (strstr(buff, "ERROR\n")) {
+			log_message(LOG_ERR, "ClamAV communication error: %s", buff);
+			waserror = 1;
+			break;
+		}
+	}
+
+	fclose(fd);
+
+	return infected ? infected : (waserror ? -1 : 0);
+}
+
+/* By Pablo Ruiz Garcia (pruiz@netway.org)
+ * Based on work by Richard Lyons <frob-clamav*webcentral.com.au> 
+ */
+int clamd_scan_fd(int sockfd, int fd, char **virus) {
+	struct iovec iov[1];
+	struct msghdr msg;
+	struct cmsghdr *cmsg;
+	char tmp[CMSG_SPACE(sizeof(fd))];
+
+	iov[0].iov_base = "";
+	iov[0].iov_len = 1;
+	memset(&msg, 0, sizeof(msg));
+	msg.msg_iov = iov;
+	msg.msg_iovlen = 1;
+	/* Insert FD into msg payload */
+	msg.msg_control = tmp;
+	msg.msg_controllen = sizeof(tmp);
+	cmsg = CMSG_FIRSTHDR(&msg);
+	cmsg->cmsg_level = SOL_SOCKET;
+	cmsg->cmsg_type = SCM_RIGHTS;
+	cmsg->cmsg_len = CMSG_LEN(sizeof(fd));
+	*(int *)CMSG_DATA(cmsg) = fd;
+
+	if (sendmsg(sockfd, &msg, 0) != iov[0].iov_len) {
+		log_message(LOG_ERR, "Unable to send fd to clamd");
+		return -1;
+	}
+
+	return dsresult(sockfd, virus);
+}
+
+int clamd_connect(void) {
+	struct sockaddr_un server;
+	int sockd;
+
+
+	memset((char *) &server, 0, sizeof(server));
+
+	server.sun_family = AF_UNIX;
+	strncpy(server.sun_path, config->virusscanner, sizeof(server.sun_path));
+
+	if((sockd = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {
+		log_message(LOG_ERR, "Unable to create clamd socket: %m");
+	    	return -1;
+	}
+
+	if(connect(sockd, (struct sockaddr *) &server, sizeof(struct sockaddr_un)) < 0) {
+		close(sockd);
+		log_message(LOG_ERR, "clamd connection failed: %m");
+		return -1;
+	}
+
+	return sockd;
+}
+
+static int check(struct proxycontext *p, char * filetoscan, char ** virname){
+  int svr_socket=0, file_fd=0;
+  int ret=0;
+
+  /* Create socket */
+  if ((svr_socket = clamd_connect()) < 0) {
+     do_log(LOG_CRIT, "Could not create socket!");
+     return SCANNER_RET_ERR;
+  }
+
+  /* Open "filetoscan" */
+  if ((file_fd = open(filetoscan, O_RDONLY)) < 0) {
+     do_log(LOG_CRIT, "Could not open file to scan!");
+     close(svr_socket);
+     return SCANNER_RET_ERR;
+  }
+
+  ret = clamd_scan_fd(svr_socket, file_fd, virname);
+  close(svr_socket);
+  close(file_fd);
+
+  if (ret > 0) return SCANNER_RET_VIRUS; // contains a virus
+  else if (!ret) return SCANNER_RET_OK; // all ok, no virus
+  else return SCANNER_RET_ERR;
+}
+
+static int init1(void){
+   int   len,loc,loc2;
+   char  *tmp=NULL;
+
+   if (strlen(NONULL(config->virusscanner))<1){
+      config->virusscanner=strdup(DEFAULT_SOCKET);
+      do_log(LOG_CRIT, "Clamd Unix init: No scanner was defined. we're using %s",config->virusscanner);
+   } else {
+      do_log(LOG_DEBUG, "Clamd Unix init. Socket: %s", config->virusscanner);
+   }
+
+   if (strlen(NONULL(config->virusscanner))<1){
+      do_log(LOG_CRIT, "no scanner was defined. scanning completely disabled");
+      return SCANNER_RET_ERR;
+   }
+   return 0;
+}
+
+static int scan(struct proxycontext *p, char **virname){
+   int ret;
+
+   do_log(LOG_DEBUG, "Clamd Unix scanner says hello");
+   ret = check(p, p->scanthis, virname);
+   do_log(LOG_DEBUG, "Clamd Unix scanner says goodbye: %i",ret);
+   return ret;
+}
+
+static void uninit1(void){
+   if(config->virusscanner) free(config->virusscanner);
+   config->virusscanner = NULL;
+}
+
+scanner_t scanner_clamdunix = {
+   "clamdunix",                /* name */
+   "ClamAV UnixDomain Daemon",    /* description */
+   &init1,                 /* init1 (once, afer startup) */
+   NULL,                   /* init2 (every connection before first mail) */
+   &scan,                  /* scan */
+   NULL,                   /* uninit2 */
+   &uninit1,               /* uninit1 */
+   0                       /* dirscan */
+};
+
+
